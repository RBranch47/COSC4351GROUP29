{"ast":null,"code":"var _jsxFileName = \"D:\\\\Courses\\\\UH COURSES\\\\Fall 2021\\\\COSC 4351\\\\Booking-Reservation-App\\\\client\\\\src\\\\pages\\\\book\\\\Book.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { UncontrolledDropdown, DropdownToggle, DropdownItem } from \"reactstrap\";\nimport Table from \"../../components/table/Table\";\nimport { Context } from \"../../context/Context\";\nimport \"./book.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { setHours, setMinutes } from \"date-fns\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Book() {\n  _s();\n\n  const KEY = process.env.REACT_APP_STRIPE;\n  const {\n    user\n  } = useContext(Context);\n  const [error, setError] = useState(false);\n  const [totalTables, setTotalTables] = useState([]); // Information about table and date\n\n  const [selection, setSelection] = useState({\n    table: {\n      name: null,\n      id: null\n    },\n    datetime: null,\n    size: null\n  }); // Information about reservation's user\n\n  const [booking, setBooking] = useState({\n    userId: user ? user._id : null,\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  });\n  const [stripeToken, setStripeToken] = useState(null); // Click and choose table\n\n  const selectTable = (table_name, table_id) => {\n    setSelection({ ...selection,\n      table: {\n        name: table_name,\n        id: table_id\n      }\n    });\n  }; // Create size\n\n\n  const getSizes = _ => {\n    let newSizes = [];\n\n    for (let i = 1; i <= 8; i++) {\n      newSizes.push( /*#__PURE__*/_jsxDEV(DropdownItem, {\n        className: \"bookingOptionItem\",\n        onClick: e => {\n          let newSel = { ...selection,\n            table: { ...selection.table\n            },\n            size: i\n          };\n          setSelection(newSel);\n        },\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this));\n    }\n\n    return newSizes;\n  }; // Create tables\n\n\n  const getTables = _ => {\n    console.log(\"Getting tables\");\n\n    if (getEmptyTables() > 0) {\n      let tables = [];\n      totalTables.forEach(table => {\n        if (table.isAvailable) {\n          tables.push( /*#__PURE__*/_jsxDEV(Table, {\n            id: table._id,\n            chairs: table.capacity,\n            name: table.name,\n            empty: true,\n            selectTable: selectTable\n          }, table._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this));\n        } else {\n          tables.push( /*#__PURE__*/_jsxDEV(Table, {\n            id: table._id,\n            chairs: table.capacity,\n            name: table.name,\n            selectTable: selectTable\n          }, table._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this));\n        }\n      });\n      return tables;\n    }\n  }; // Check if date is weekend or not\n\n\n  const checkWeekend = _ => {\n    var currentDay = selection.datetime.getDay();\n    var dateIsInWeekend = currentDay === 6 || currentDay === 0;\n\n    if (dateIsInWeekend === true) {\n      return true;\n    } else {\n      return false;\n    }\n  }; // Date && Time\n\n\n  const [startDate, setStartDate] = useState(null);\n\n  const filterPassedTime = time => {\n    const currentDate = new Date();\n    const selectedDate = new Date(time);\n    return currentDate.getTime() < selectedDate.getTime();\n  }; // Stripe method\n\n\n  const onToken = token => {\n    setStripeToken(token);\n  }; // API *** Stripe Payment Checkout\n\n\n  useEffect(() => {\n    const makeRequest = async () => {\n      try {\n        const res = await axios.post(\"/checkout/payment\", {\n          tokenId: stripeToken.id,\n          amount: 1000\n        });\n        console.log(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    stripeToken && makeRequest();\n  }, [stripeToken]);\n\n  const getEmptyTables = _ => {\n    let tables = totalTables.filter(table => table.isAvailable);\n    return tables.length;\n  }; // API *** Get availability datetime and table\n\n\n  useEffect(() => {\n    // Check availability of tables (datetime & size)\n    if (selection.datetime && selection.size) {\n      (async _ => {\n        let selectedDate = selection.datetime.toUTCString(); // selectedDate = selectedDate.toISOString().split(\".\")[0];\n\n        let res = await fetch(\"http://localhost:5000/api/availability\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            date: selectedDate\n          })\n        });\n        res = await res.json();\n        let tableSize = selection.size;\n\n        if (tableSize % 2 === 1) {\n          tableSize = tableSize + 1;\n        }\n\n        let tables = res.tables.filter(table => selection.size > 0 ? table.capacity === tableSize : true);\n        setTotalTables(tables);\n      })();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [selection.datetime, selection.size]); // API *** Store Reservation to database\n\n  const reserve = async e => {\n    if (booking.name.length === 0 | booking.phone.length === 0 | booking.email.length === 0) {\n      e.preventDefault();\n      console.log(\"Incomplete Details\");\n      setError(true);\n    } else {\n      try {\n        let selectedDate = selection.datetime.toUTCString();\n        let res = await fetch(\"http://localhost:5000/api/reserve\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ ...booking,\n            date: selectedDate,\n            table: selection.table.id\n          })\n        });\n        res = await res.text();\n        console.log(\"Reserved: \" + res);\n        window.location.replace(\"/thankyou\");\n      } catch (err) {}\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"booking\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookingTop\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bookingTitle\",\n        children: !selection.table.id ? \"Available Tables\" : \"Confirm Reservation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bookingTableName\",\n        children: selection.table.id ? \"You are booking \" + selection.table.name + \" at \" + selection.datetime.toLocaleString(\"en-US\") : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"reservation-error\",\n        children: \"* Please fill out all of the details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), !selection.table.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"reservation-stuff\",\n      className: \"bookingPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bookingItems\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookingItemEach\",\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            className: \"bookingOption\",\n            placeholderText: \"Select a Date and Time\",\n            selected: startDate,\n            onChange: e => {\n              setStartDate(e);\n              selection.datetime = e;\n            },\n            showTimeSelect: true,\n            timeIntervals: 60,\n            minDate: new Date(),\n            minTime: setHours(setMinutes(new Date(), 0), 16),\n            maxTime: setHours(setMinutes(new Date(), 0), 23),\n            filterTime: filterPassedTime,\n            dateFormat: \"MMMM d, yyyy h:mm aa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookingItemEach\",\n          children: /*#__PURE__*/_jsxDEV(UncontrolledDropdown, {\n            children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n              className: \"bookingOption\",\n              children: selection.size === null ? \"Select a Party Size\" : \"Selected Size: \" + selection.size.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bookingOptionMenu\",\n              children: getSizes()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tablesDisplay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [getEmptyTables() > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"availableNumbers\",\n            children: [getEmptyTables(), \" Available Tables\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this) : null, selection.datetime && selection.size ? getEmptyTables() > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tableKey\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"emptyTable\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 23\n              }, this), \" \\xA0 Available \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"fullTable\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 23\n              }, this), \" \\xA0 Unavailable \\xA0\\xA0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"getTables\",\n              children: getTables()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bookingTableMessage\",\n            children: \"No Available Tables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bookingTableMessage\",\n            children: \"Please select date, time, and size for your reservation.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reservation\",\n      children: checkWeekend() ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Due to Weekend Reservation, We will charge $10 and Refund back to you if showup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(StripeCheckout, {\n          name: \"DustinV Shop\",\n          image: \"https://avatars.githubusercontent.com/u/78432157?s=400&u=a3542854353b321e90e5f526d6ac7d5b30a702bf&v=4\",\n          billingAddress: true,\n          shippingAddress: true,\n          description: `Your Holding Charge is $10`,\n          amount: 1000,\n          token: onToken,\n          stripeKey: KEY,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reservationButton\",\n            children: \"PAY\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"reservationForm\",\n        onSubmit: reserve,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"reservationInput\",\n          type: \"text\",\n          placeholder: \"Enter your name...\" // value={booking.name}\n          ,\n          onChange: e => {\n            setBooking({ ...booking,\n              name: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"reservationInput\",\n          type: \"text\",\n          placeholder: \"Enter your email...\" // value={booking.email}\n          ,\n          onChange: e => {\n            setBooking({ ...booking,\n              email: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Phone Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"reservationInput\",\n          type: \"text\",\n          placeholder: \"Enter your phone number...\" // value={booking.phone}\n          ,\n          onChange: e => {\n            setBooking({ ...booking,\n              phone: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reservationButton\",\n          type: \"submit\",\n          children: \"Book Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Book, \"sIK103sTY5oVpNv3Wn1Mi/vlwIk=\");\n\n_c = Book;\n\nvar _c;\n\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"sources":["D:/Courses/UH COURSES/Fall 2021/COSC 4351/Booking-Reservation-App/client/src/pages/book/Book.jsx"],"names":["React","useState","useEffect","useContext","UncontrolledDropdown","DropdownToggle","DropdownItem","Table","Context","DatePicker","setHours","setMinutes","StripeCheckout","axios","Book","KEY","process","env","REACT_APP_STRIPE","user","error","setError","totalTables","setTotalTables","selection","setSelection","table","name","id","datetime","size","booking","setBooking","userId","_id","phone","email","stripeToken","setStripeToken","selectTable","table_name","table_id","getSizes","_","newSizes","i","push","e","newSel","getTables","console","log","getEmptyTables","tables","forEach","isAvailable","capacity","checkWeekend","currentDay","getDay","dateIsInWeekend","startDate","setStartDate","filterPassedTime","time","currentDate","Date","selectedDate","getTime","onToken","token","makeRequest","res","post","tokenId","amount","data","filter","length","toUTCString","fetch","method","headers","body","JSON","stringify","date","json","tableSize","reserve","preventDefault","text","window","location","replace","err","toLocaleString","toString","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownItem } from \"reactstrap\";\r\nimport Table from \"../../components/table/Table\";\r\nimport { Context } from \"../../context/Context\";\r\nimport \"./book.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { setHours, setMinutes } from \"date-fns\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Book() {\r\n  const KEY = process.env.REACT_APP_STRIPE;\r\n\r\n  const { user } = useContext(Context);\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const [totalTables, setTotalTables] = useState([]);\r\n\r\n  // Information about table and date\r\n  const [selection, setSelection] = useState({\r\n    table: {\r\n      name: null,\r\n      id: null,\r\n    },\r\n    datetime: null,\r\n    size: null,\r\n  });\r\n\r\n  // Information about reservation's user\r\n  const [booking, setBooking] = useState({\r\n    userId: user ? user._id : null,\r\n    name: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  const [stripeToken, setStripeToken] = useState(null);\r\n\r\n  // Click and choose table\r\n  const selectTable = (table_name, table_id) => {\r\n    setSelection({\r\n      ...selection,\r\n      table: {\r\n        name: table_name,\r\n        id: table_id,\r\n      },\r\n    });\r\n  };\r\n\r\n  // Create size\r\n  const getSizes = (_) => {\r\n    let newSizes = [];\r\n    for (let i = 1; i <= 8; i++) {\r\n      newSizes.push(\r\n        <DropdownItem\r\n          key={i}\r\n          className=\"bookingOptionItem\"\r\n          onClick={(e) => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table,\r\n              },\r\n              size: i,\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {i}\r\n        </DropdownItem>\r\n      );\r\n    }\r\n    return newSizes;\r\n  };\r\n\r\n  // Create tables\r\n  const getTables = (_) => {\r\n    console.log(\"Getting tables\");\r\n    if (getEmptyTables() > 0) {\r\n      let tables = [];\r\n      totalTables.forEach((table) => {\r\n        if (table.isAvailable) {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              empty\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        } else {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        }\r\n      });\r\n      return tables;\r\n    }\r\n  };\r\n\r\n  // Check if date is weekend or not\r\n  const checkWeekend = (_) => {\r\n    var currentDay = selection.datetime.getDay();\r\n    var dateIsInWeekend = currentDay === 6 || currentDay === 0;\r\n    if (dateIsInWeekend === true) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Date && Time\r\n  const [startDate, setStartDate] = useState(null);\r\n  const filterPassedTime = (time) => {\r\n    const currentDate = new Date();\r\n    const selectedDate = new Date(time);\r\n    return currentDate.getTime() < selectedDate.getTime();\r\n  };\r\n\r\n  // Stripe method\r\n  const onToken = (token) => {\r\n    setStripeToken(token);\r\n  };\r\n\r\n  // API *** Stripe Payment Checkout\r\n  useEffect(() => {\r\n    const makeRequest = async () => {\r\n      try {\r\n        const res = await axios.post(\"/checkout/payment\", {\r\n          tokenId: stripeToken.id,\r\n          amount: 1000,\r\n        });\r\n        console.log(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    stripeToken && makeRequest();\r\n  }, [stripeToken]);\r\n\r\n  const getEmptyTables = (_) => {\r\n    let tables = totalTables.filter((table) => table.isAvailable);\r\n    return tables.length;\r\n  };\r\n\r\n  // API *** Get availability datetime and table\r\n  useEffect(() => {\r\n    // Check availability of tables (datetime & size)\r\n    if (selection.datetime && selection.size) {\r\n      (async (_) => {\r\n        let selectedDate = selection.datetime.toUTCString();\r\n        // selectedDate = selectedDate.toISOString().split(\".\")[0];\r\n        let res = await fetch(\"http://localhost:5000/api/availability\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            date: selectedDate,\r\n          }),\r\n        });\r\n        res = await res.json();\r\n\r\n        let tableSize = selection.size;\r\n        if (tableSize % 2 === 1) {\r\n          tableSize = tableSize + 1;\r\n        }\r\n        let tables = res.tables.filter((table) =>\r\n          selection.size > 0 ? table.capacity === tableSize : true\r\n        );\r\n        setTotalTables(tables);\r\n      })();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selection.datetime, selection.size]);\r\n\r\n  // API *** Store Reservation to database\r\n  const reserve = async (e) => {\r\n    if (\r\n      (booking.name.length === 0) |\r\n      (booking.phone.length === 0) |\r\n      (booking.email.length === 0)\r\n    ) {\r\n      e.preventDefault();\r\n      console.log(\"Incomplete Details\");\r\n      setError(true);\r\n    } else {\r\n      try {\r\n        let selectedDate = selection.datetime.toUTCString();\r\n        let res = await fetch(\"http://localhost:5000/api/reserve\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            ...booking,\r\n            date: selectedDate,\r\n            table: selection.table.id,\r\n          }),\r\n        });\r\n        res = await res.text();\r\n        console.log(\"Reserved: \" + res);\r\n        window.location.replace(\"/thankyou\");\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"booking\">\r\n      <div className=\"bookingTop\">\r\n        <span className=\"bookingTitle\">\r\n          {!selection.table.id ? \"Available Tables\" : \"Confirm Reservation\"}\r\n        </span>\r\n        <span className=\"bookingTableName\">\r\n          {selection.table.id\r\n            ? \"You are booking \" +\r\n              selection.table.name +\r\n              \" at \" +\r\n              selection.datetime.toLocaleString(\"en-US\")\r\n            : null}\r\n        </span>\r\n\r\n        {error && (\r\n          <span className=\"reservation-error\">\r\n            * Please fill out all of the details.\r\n          </span>\r\n        )}\r\n      </div>\r\n\r\n      {!selection.table.id ? (\r\n        <div id=\"reservation-stuff\" className=\"bookingPage\">\r\n          <div className=\"bookingItems\">\r\n            <div className=\"bookingItemEach\">\r\n              <DatePicker\r\n                className=\"bookingOption\"\r\n                placeholderText=\"Select a Date and Time\"\r\n                selected={startDate}\r\n                onChange={(e) => {\r\n                  setStartDate(e);\r\n                  selection.datetime = e;\r\n                }}\r\n                showTimeSelect\r\n                timeIntervals={60}\r\n                minDate={new Date()}\r\n                minTime={setHours(setMinutes(new Date(), 0), 16)}\r\n                maxTime={setHours(setMinutes(new Date(), 0), 23)}\r\n                filterTime={filterPassedTime}\r\n                dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n              />\r\n            </div>\r\n            <div className=\"bookingItemEach\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle className=\"bookingOption\">\r\n                  {selection.size === null\r\n                    ? \"Select a Party Size\"\r\n                    : \"Selected Size: \" + selection.size.toString()}\r\n                </DropdownToggle>\r\n                <div className=\"bookingOptionMenu\">{getSizes()}</div>\r\n              </UncontrolledDropdown>\r\n            </div>\r\n          </div>\r\n          <div className=\"tablesDisplay\">\r\n            <div>\r\n              {getEmptyTables() > 0 ? (\r\n                <div className=\"availableNumbers\">\r\n                  {getEmptyTables()} Available Tables\r\n                </div>\r\n              ) : null}\r\n\r\n              {selection.datetime && selection.size ? (\r\n                getEmptyTables() > 0 ? (\r\n                  <div>\r\n                    <div className=\"tableKey\">\r\n                      <span className=\"emptyTable\"></span> &nbsp; Available\r\n                      &nbsp;&nbsp;\r\n                      <span className=\"fullTable\"></span> &nbsp; Unavailable\r\n                      &nbsp;&nbsp;\r\n                    </div>\r\n                    <div className=\"getTables\">{getTables()}</div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"bookingTableMessage\">No Available Tables</div>\r\n                )\r\n              ) : (\r\n                <div className=\"bookingTableMessage\">\r\n                  Please select date, time, and size for your reservation.\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"reservation\">\r\n          {checkWeekend() ? (\r\n            <div>\r\n              <span>\r\n                Due to Weekend Reservation, We will charge $10 and Refund back\r\n                to you if showup\r\n              </span>\r\n\r\n              <StripeCheckout\r\n                name=\"DustinV Shop\"\r\n                image=\"https://avatars.githubusercontent.com/u/78432157?s=400&u=a3542854353b321e90e5f526d6ac7d5b30a702bf&v=4\"\r\n                billingAddress\r\n                shippingAddress\r\n                description={`Your Holding Charge is $10`}\r\n                amount={1000}\r\n                token={onToken}\r\n                stripeKey={KEY}\r\n              >\r\n                <button className=\"reservationButton\">PAY</button>\r\n              </StripeCheckout>\r\n            </div>\r\n          ) : (\r\n            <form className=\"reservationForm\" onSubmit={reserve}>\r\n              <label>Name</label>\r\n              <input\r\n                className=\"reservationInput\"\r\n                type=\"text\"\r\n                placeholder=\"Enter your name...\"\r\n                // value={booking.name}\r\n                onChange={(e) => {\r\n                  setBooking({\r\n                    ...booking,\r\n                    name: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n              <label>Email</label>\r\n              <input\r\n                className=\"reservationInput\"\r\n                type=\"text\"\r\n                placeholder=\"Enter your email...\"\r\n                // value={booking.email}\r\n                onChange={(e) => {\r\n                  setBooking({\r\n                    ...booking,\r\n                    email: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n              <label>Phone Number</label>\r\n              <input\r\n                className=\"reservationInput\"\r\n                type=\"text\"\r\n                placeholder=\"Enter your phone number...\"\r\n                // value={booking.phone}\r\n                onChange={(e) => {\r\n                  setBooking({\r\n                    ...booking,\r\n                    phone: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n              <button className=\"reservationButton\" type=\"submit\">\r\n                Book Now\r\n              </button>\r\n            </form>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}