{"ast":null,"code":"var _jsxFileName = \"D:\\\\Courses\\\\UH COURSES\\\\Fall 2021\\\\COSC 4351\\\\Booking-Reservation-App\\\\client\\\\src\\\\pages\\\\book\\\\Book.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { UncontrolledDropdown, DropdownToggle, DropdownItem } from \"reactstrap\";\nimport Table from \"../../components/table/Table\";\nimport { Context } from \"../../context/Context\";\nimport \"./book.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { setHours, setMinutes } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Book() {\n  _s();\n\n  const {\n    user\n  } = useContext(Context);\n  const [error, setError] = useState(false);\n  const [totalTables, setTotalTables] = useState([]); // Information about table and date\n\n  const [selection, setSelection] = useState({\n    table: {\n      name: null,\n      id: null\n    },\n    datetime: null,\n    size: null\n  }); // Information about reservation's user\n\n  const [booking, setBooking] = useState({\n    userId: user ? user._id : null,\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  }); // const [times] = useState([\n  //   \"16:00\",\n  //   \"17:00\",\n  //   \"18:00\",\n  //   \"19:00\",\n  //   \"20:00\",\n  //   \"21:00\",\n  //   \"22:00\",\n  //   \"23:00\",\n  // ]);\n  // const getDate = (_) => {\n  //   const months = [\n  //     \"January\",\n  //     \"February\",\n  //     \"March\",\n  //     \"April\",\n  //     \"May\",\n  //     \"June\",\n  //     \"July\",\n  //     \"August\",\n  //     \"September\",\n  //     \"October\",\n  //     \"November\",\n  //     \"December\",\n  //   ];\n  //   const date =\n  //     months[selection.date.getMonth()] +\n  //     \" \" +\n  //     selection.date.getDate() +\n  //     \" \" +\n  //     selection.date.getFullYear();\n  //   let time = selection.time.slice(0, -3);\n  //   time = time + \":00\";\n  //   const datetime = new Date(date + \" \" + time);\n  //   console.log(datetime);\n  //   return datetime;\n  // };\n\n  const getEmptyTables = _ => {\n    let tables = totalTables.filter(table => table.isAvailable);\n    return tables.length;\n  };\n\n  useEffect(() => {\n    // Check availability of tables (datetime & size)\n    if (selection.datetime && selection.size) {\n      (async _ => {\n        let selectedDate = selection.datetime.toISOString().split(\".\")[0];\n        console.log(selectedDate);\n        let res = await fetch(\"http://localhost:5000/api/availability\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            date: selectedDate\n          })\n        });\n        res = await res.json();\n        let tables = res.tables.filter(table => selection.size > 0 ? table.capacity >= selection.size : true);\n        setTotalTables(tables);\n      })();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [selection.datetime, selection.size]); // Send and Store Reservation to database\n\n  const reserve = async e => {\n    e.preventDefault();\n    console.log(\"Incomplete Details\");\n    setError(true);\n\n    try {\n      let selectedDate = selection.datetime.toISOString().split(\".\")[0];\n      let res = await fetch(\"http://localhost:5000/api/reserve\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ ...booking,\n          date: selectedDate,\n          table: selection.table.id\n        })\n      });\n      res = await res.text();\n      console.log(\"Reserved: \" + res);\n      window.location.replace(\"/thankyou\");\n    } catch (err) {}\n  }; // Click and choose table\n\n\n  const selectTable = (table_name, table_id) => {\n    setSelection({ ...selection,\n      table: {\n        name: table_name,\n        id: table_id\n      }\n    });\n  }; // Create size\n\n\n  const getSizes = _ => {\n    let newSizes = [];\n\n    for (let i = 1; i <= 8; i++) {\n      newSizes.push( /*#__PURE__*/_jsxDEV(DropdownItem, {\n        className: \"bookingOptionItem\",\n        onClick: e => {\n          let newSel = { ...selection,\n            table: { ...selection.table\n            },\n            size: i\n          };\n          setSelection(newSel);\n        },\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this));\n    }\n\n    return newSizes;\n  }; // Create tables\n\n\n  const getTables = _ => {\n    console.log(\"Getting tables\");\n\n    if (getEmptyTables() > 0) {\n      let tables = [];\n      totalTables.forEach(table => {\n        if (table.isAvailable) {\n          tables.push( /*#__PURE__*/_jsxDEV(Table, {\n            id: table._id,\n            chairs: table.capacity,\n            name: table.name,\n            empty: true,\n            selectTable: selectTable\n          }, table._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this));\n        } else {\n          tables.push( /*#__PURE__*/_jsxDEV(Table, {\n            id: table._id,\n            chairs: table.capacity,\n            name: table.name,\n            selectTable: selectTable\n          }, table._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this));\n        }\n      });\n      return tables;\n    }\n  };\n\n  const [startDate, setStartDate] = useState(setHours(setMinutes(new Date(), 0), 17));\n\n  const filterPassedTime = time => {\n    const currentDate = new Date();\n    const selectedDate = new Date(time); // console.log(selection.datetime);\n\n    return currentDate.getTime() < selectedDate.getTime();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"booking\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookingTop\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bookingTitle\",\n        children: !selection.table.id ? \"Available Tables\" : \"Confirm Reservation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bookingTableName\",\n        children: selection.table.id ? \"You are booking \" + selection.table.name + \" at \" + selection.datetime.toLocaleString(\"en-US\") : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"reservation-error\",\n        children: \"* Please fill out all of the details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), !selection.table.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"reservation-stuff\",\n      className: \"bookingPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bookingItems\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookingItemEach\",\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            className: \"bookingOption\",\n            selected: startDate,\n            onChange: e => {\n              setStartDate(e);\n              selection.datetime = e;\n            },\n            showTimeSelect: true,\n            timeIntervals: 60,\n            minDate: new Date(),\n            minTime: setHours(setMinutes(new Date(), 0), 16),\n            maxTime: setHours(setMinutes(new Date(), 0), 23),\n            filterTime: filterPassedTime,\n            dateFormat: \"MMMM d, yyyy h:mm aa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookingItemEach\",\n          children: /*#__PURE__*/_jsxDEV(UncontrolledDropdown, {\n            children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n              color: \"none\",\n              caret: true,\n              className: \"bookingOption\",\n              children: selection.size === null ? \"Select a Party Size\" : selection.size.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bookingOptionMenu\",\n              children: getSizes()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tablesDisplay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [getEmptyTables() > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"availableNumbers\",\n            children: [getEmptyTables(), \" Available Tables\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this) : null, selection.datetime && selection.size ? getEmptyTables() > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tableKey\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"emptyTable\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 23\n              }, this), \" \\xA0 Available \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"fullTable\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 23\n              }, this), \" \\xA0 Unavailable \\xA0\\xA0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"getTables\",\n              children: getTables()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bookingTableMessage\",\n            children: \"No Available Tables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bookingTableMessage\",\n            children: \"Please select date, time, and size for your reservation.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reservation\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"reservationForm\",\n        onSubmit: reserve,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"reservationInput\",\n          type: \"text\",\n          placeholder: \"Enter your name...\",\n          value: booking.name,\n          onChange: e => {\n            console.log(e.target.value);\n            setBooking({ ...booking,\n              name: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"reservationInput\",\n          type: \"text\",\n          placeholder: \"Enter your email...\",\n          value: booking.email,\n          onChange: e => {\n            setBooking({ ...booking,\n              email: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Phone Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"reservationInput\",\n          type: \"text\",\n          placeholder: \"Enter your phone number...\",\n          value: booking.phone,\n          onChange: e => {\n            setBooking({ ...booking,\n              phone: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reservationButton\",\n          type: \"submit\",\n          children: \"Book Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Book, \"AJrF9EBOgoUIwngoBqG1apWlXvA=\");\n\n_c = Book;\n\nvar _c;\n\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"sources":["D:/Courses/UH COURSES/Fall 2021/COSC 4351/Booking-Reservation-App/client/src/pages/book/Book.jsx"],"names":["React","useState","useEffect","useContext","UncontrolledDropdown","DropdownToggle","DropdownItem","Table","Context","DatePicker","setHours","setMinutes","Book","user","error","setError","totalTables","setTotalTables","selection","setSelection","table","name","id","datetime","size","booking","setBooking","userId","_id","phone","email","getEmptyTables","_","tables","filter","isAvailable","length","selectedDate","toISOString","split","console","log","res","fetch","method","headers","body","JSON","stringify","date","json","capacity","reserve","e","preventDefault","text","window","location","replace","err","selectTable","table_name","table_id","getSizes","newSizes","i","push","newSel","getTables","forEach","startDate","setStartDate","Date","filterPassedTime","time","currentDate","getTime","toLocaleString","toString","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownItem } from \"reactstrap\";\r\nimport Table from \"../../components/table/Table\";\r\nimport { Context } from \"../../context/Context\";\r\nimport \"./book.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { setHours, setMinutes } from \"date-fns\";\r\n\r\nexport default function Book() {\r\n  const { user } = useContext(Context);\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const [totalTables, setTotalTables] = useState([]);\r\n\r\n  // Information about table and date\r\n  const [selection, setSelection] = useState({\r\n    table: {\r\n      name: null,\r\n      id: null,\r\n    },\r\n    datetime: null,\r\n    size: null,\r\n  });\r\n\r\n  // Information about reservation's user\r\n  const [booking, setBooking] = useState({\r\n    userId: user ? user._id : null,\r\n    name: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  // const [times] = useState([\r\n  //   \"16:00\",\r\n  //   \"17:00\",\r\n  //   \"18:00\",\r\n  //   \"19:00\",\r\n  //   \"20:00\",\r\n  //   \"21:00\",\r\n  //   \"22:00\",\r\n  //   \"23:00\",\r\n  // ]);\r\n\r\n  // const getDate = (_) => {\r\n  //   const months = [\r\n  //     \"January\",\r\n  //     \"February\",\r\n  //     \"March\",\r\n  //     \"April\",\r\n  //     \"May\",\r\n  //     \"June\",\r\n  //     \"July\",\r\n  //     \"August\",\r\n  //     \"September\",\r\n  //     \"October\",\r\n  //     \"November\",\r\n  //     \"December\",\r\n  //   ];\r\n  //   const date =\r\n  //     months[selection.date.getMonth()] +\r\n  //     \" \" +\r\n  //     selection.date.getDate() +\r\n  //     \" \" +\r\n  //     selection.date.getFullYear();\r\n  //   let time = selection.time.slice(0, -3);\r\n  //   time = time + \":00\";\r\n  //   const datetime = new Date(date + \" \" + time);\r\n  //   console.log(datetime);\r\n  //   return datetime;\r\n  // };\r\n\r\n  const getEmptyTables = (_) => {\r\n    let tables = totalTables.filter((table) => table.isAvailable);\r\n    return tables.length;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check availability of tables (datetime & size)\r\n    if (selection.datetime && selection.size) {\r\n      (async (_) => {\r\n        let selectedDate = selection.datetime.toISOString().split(\".\")[0];\r\n        console.log(selectedDate);\r\n        let res = await fetch(\"http://localhost:5000/api/availability\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            date: selectedDate,\r\n          }),\r\n        });\r\n        res = await res.json();\r\n\r\n        let tables = res.tables.filter((table) =>\r\n          selection.size > 0 ? table.capacity >= selection.size : true\r\n        );\r\n        setTotalTables(tables);\r\n      })();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selection.datetime, selection.size]);\r\n\r\n  // Send and Store Reservation to database\r\n  const reserve = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Incomplete Details\");\r\n    setError(true);\r\n    try {\r\n      let selectedDate = selection.datetime.toISOString().split(\".\")[0];\r\n      let res = await fetch(\"http://localhost:5000/api/reserve\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          ...booking,\r\n          date: selectedDate,\r\n          table: selection.table.id,\r\n        }),\r\n      });\r\n      res = await res.text();\r\n      console.log(\"Reserved: \" + res);\r\n      window.location.replace(\"/thankyou\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  // Click and choose table\r\n  const selectTable = (table_name, table_id) => {\r\n    setSelection({\r\n      ...selection,\r\n      table: {\r\n        name: table_name,\r\n        id: table_id,\r\n      },\r\n    });\r\n  };\r\n\r\n  // Create size\r\n  const getSizes = (_) => {\r\n    let newSizes = [];\r\n\r\n    for (let i = 1; i <= 8; i++) {\r\n      newSizes.push(\r\n        <DropdownItem\r\n          key={i}\r\n          className=\"bookingOptionItem\"\r\n          onClick={(e) => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table,\r\n              },\r\n              size: i,\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {i}\r\n        </DropdownItem>\r\n      );\r\n    }\r\n    return newSizes;\r\n  };\r\n\r\n  // Create tables\r\n  const getTables = (_) => {\r\n    console.log(\"Getting tables\");\r\n    if (getEmptyTables() > 0) {\r\n      let tables = [];\r\n      totalTables.forEach((table) => {\r\n        if (table.isAvailable) {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              empty\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        } else {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        }\r\n      });\r\n      return tables;\r\n    }\r\n  };\r\n  const [startDate, setStartDate] = useState(\r\n    setHours(setMinutes(new Date(), 0), 17)\r\n  );\r\n\r\n  const filterPassedTime = (time) => {\r\n    const currentDate = new Date();\r\n    const selectedDate = new Date(time);\r\n    // console.log(selection.datetime);\r\n    return currentDate.getTime() < selectedDate.getTime();\r\n  };\r\n\r\n  return (\r\n    <div className=\"booking\">\r\n      <div className=\"bookingTop\">\r\n        <span className=\"bookingTitle\">\r\n          {!selection.table.id ? \"Available Tables\" : \"Confirm Reservation\"}\r\n        </span>\r\n        <span className=\"bookingTableName\">\r\n          {selection.table.id\r\n            ? \"You are booking \" +\r\n              selection.table.name +\r\n              \" at \" +\r\n              selection.datetime.toLocaleString(\"en-US\")\r\n            : null}\r\n        </span>\r\n\r\n        {error ? (\r\n          <span className=\"reservation-error\">\r\n            * Please fill out all of the details.\r\n          </span>\r\n        ) : null}\r\n      </div>\r\n\r\n      {!selection.table.id ? (\r\n        <div id=\"reservation-stuff\" className=\"bookingPage\">\r\n          <div className=\"bookingItems\">\r\n            <div className=\"bookingItemEach\">\r\n              <DatePicker\r\n                className=\"bookingOption\"\r\n                selected={startDate}\r\n                onChange={(e) => {\r\n                  setStartDate(e);\r\n                  selection.datetime = e;\r\n                }}\r\n                showTimeSelect\r\n                timeIntervals={60}\r\n                minDate={new Date()}\r\n                minTime={setHours(setMinutes(new Date(), 0), 16)}\r\n                maxTime={setHours(setMinutes(new Date(), 0), 23)}\r\n                filterTime={filterPassedTime}\r\n                dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n              />\r\n            </div>\r\n            <div className=\"bookingItemEach\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle color=\"none\" caret className=\"bookingOption\">\r\n                  {selection.size === null\r\n                    ? \"Select a Party Size\"\r\n                    : selection.size.toString()}\r\n                </DropdownToggle>\r\n                <div className=\"bookingOptionMenu\">{getSizes()}</div>\r\n              </UncontrolledDropdown>\r\n            </div>\r\n          </div>\r\n          <div className=\"tablesDisplay\">\r\n            <div>\r\n              {getEmptyTables() > 0 ? (\r\n                <div className=\"availableNumbers\">\r\n                  {getEmptyTables()} Available Tables\r\n                </div>\r\n              ) : null}\r\n\r\n              {selection.datetime && selection.size ? (\r\n                getEmptyTables() > 0 ? (\r\n                  <div>\r\n                    <div className=\"tableKey\">\r\n                      <span className=\"emptyTable\"></span> &nbsp; Available\r\n                      &nbsp;&nbsp;\r\n                      <span className=\"fullTable\"></span> &nbsp; Unavailable\r\n                      &nbsp;&nbsp;\r\n                    </div>\r\n                    <div className=\"getTables\">{getTables()}</div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"bookingTableMessage\">No Available Tables</div>\r\n                )\r\n              ) : (\r\n                <div className=\"bookingTableMessage\">\r\n                  Please select date, time, and size for your reservation.\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"reservation\">\r\n          <form className=\"reservationForm\" onSubmit={reserve}>\r\n            <label>Name</label>\r\n            <input\r\n              className=\"reservationInput\"\r\n              type=\"text\"\r\n              placeholder=\"Enter your name...\"\r\n              value={booking.name}\r\n              onChange={(e) => {\r\n                console.log(e.target.value);\r\n                setBooking({\r\n                  ...booking,\r\n                  name: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <label>Email</label>\r\n            <input\r\n              className=\"reservationInput\"\r\n              type=\"text\"\r\n              placeholder=\"Enter your email...\"\r\n              value={booking.email}\r\n              onChange={(e) => {\r\n                setBooking({\r\n                  ...booking,\r\n                  email: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <label>Phone Number</label>\r\n            <input\r\n              className=\"reservationInput\"\r\n              type=\"text\"\r\n              placeholder=\"Enter your phone number...\"\r\n              value={booking.phone}\r\n              onChange={(e) => {\r\n                setBooking({\r\n                  ...booking,\r\n                  phone: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <button className=\"reservationButton\" type=\"submit\">\r\n              Book Now\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}