{"ast":null,"code":"var _jsxFileName = \"D:\\\\Courses\\\\UH COURSES\\\\Fall 2021\\\\COSC 4351\\\\Booking-Reservation-App\\\\client\\\\src\\\\pages\\\\book\\\\Book.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Row, Col, UncontrolledDropdown, DropdownToggle, DropdownItem, Input, Button } from \"reactstrap\";\nimport Table from \"../../components/table/Table\";\nimport \"./book.css\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Book() {\n  _s();\n\n  const [totalTables, setTotalTables] = useState([]); // User's selections\n\n  const [selection, setSelection] = useState({\n    table: {\n      name: null,\n      id: null\n    },\n    date: new Date(),\n    time: null,\n    size: null\n  }); // User's booking details\n\n  const [booking, setBooking] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  });\n  const [times] = useState([\"4PM\", \"5PM\", \"6PM\", \"7PM\", \"8PM\", \"9PM\", \"10PM\", \"11PM\"]); // Basic reservation \"validation\"\n\n  const [reservationError, setReservationError] = useState(false);\n\n  const getDate = _ => {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const date = months[selection.date.getMonth()] + \" \" + selection.date.getDate() + \" \" + selection.date.getFullYear();\n    let time = selection.time.slice(0, -2);\n    console.log(time);\n    time = selection.time > 12 ? time + 10 + \":00\" : time + \":00\";\n    const datetime = new Date(date + \" \" + time);\n    return datetime;\n  };\n\n  const getEmptyTables = _ => {\n    let tables = totalTables.filter(table => table.isAvailable);\n    return tables.length;\n  };\n\n  useEffect(() => {\n    // Check availability of tables (time & date && size)\n    if (selection.time && selection.date && selection.size) {\n      (async _ => {\n        let datetime = getDate();\n        let res = await fetch(\"http://localhost:5000/api/availability\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            date: datetime\n          })\n        });\n        res = await res.json(); // Filter available tables with location and group size criteria\n\n        let tables = res.tables.filter(table => selection.size > 0 ? table.capacity >= selection.size : true);\n        setTotalTables(tables);\n      })();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [selection.time, selection.date, selection.size]); // Make the reservation if all details are filled out\n\n  const reserve = async _ => {\n    if (booking.name.length === 0 | booking.phone.length === 0 | booking.email.length === 0) {\n      console.log(\"Incomplete Details\");\n      setReservationError(true);\n    } else {\n      const datetime = getDate();\n      let res = await fetch(\"http://localhost:5000/api/reserve\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ ...booking,\n          date: datetime,\n          table: selection.table.id\n        })\n      });\n      res = await res.text();\n      console.log(\"Reserved: \" + res); //   props.setPage(2);\n    }\n  }; // Clicking on a table sets the selection state\n\n\n  const selectTable = (table_name, table_id) => {\n    setSelection({ ...selection,\n      table: {\n        name: table_name,\n        id: table_id\n      }\n    });\n  }; // Generate party size dropdown\n\n\n  const getSizes = _ => {\n    let newSizes = [];\n\n    for (let i = 1; i <= 8; i++) {\n      newSizes.push( /*#__PURE__*/_jsxDEV(DropdownItem, {\n        className: \"bookingOptionItem\",\n        onClick: e => {\n          let newSel = { ...selection,\n            table: { ...selection.table\n            },\n            size: i\n          };\n          setSelection(newSel);\n        },\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this));\n    }\n\n    return newSizes;\n  }; // Generate locations dropdown\n\n\n  const getTimes = _ => {\n    let newTimes = [];\n    times.forEach(time => {\n      newTimes.push( /*#__PURE__*/_jsxDEV(DropdownItem, {\n        className: \"bookingOptionItem\",\n        onClick: _ => {\n          let newSel = { ...selection,\n            table: { ...selection.table\n            },\n            time: time\n          };\n          setSelection(newSel);\n        },\n        children: time\n      }, time, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this));\n    });\n    return newTimes;\n  }; // Generating tables from available tables state\n\n\n  const getTables = _ => {\n    console.log(\"Getting tables\");\n\n    if (getEmptyTables() > 0) {\n      let tables = [];\n      totalTables.forEach(table => {\n        if (table.isAvailable) {\n          tables.push( /*#__PURE__*/_jsxDEV(Table, {\n            id: table._id,\n            chairs: table.capacity,\n            name: table.name,\n            empty: true,\n            selectTable: selectTable\n          }, table._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this));\n        } else {\n          tables.push( /*#__PURE__*/_jsxDEV(Table, {\n            id: table._id,\n            chairs: table.capacity,\n            name: table.name,\n            selectTable: selectTable\n          }, table._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this));\n        }\n      });\n      return tables;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"booking\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookingTop\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bookingTitle\",\n        children: !selection.table.id ? \"Available Tables\" : \"Confirm Reservation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bookingTableName\",\n        children: selection.table.id ? \"You are booking \" + selection.table.name : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), reservationError ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"reservation-error\",\n        children: \"* Please fill out all of the details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), !selection.table.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"reservation-stuff\",\n      className: \"bookingPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bookingItems\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookingItemEach\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            required: \"required\",\n            className: \"bookingOption\",\n            value: selection.date.toISOString().split(\"T\")[0],\n            onChange: e => {\n              if (!isNaN(new Date(new Date(e.target.value)))) {\n                let newSel = { ...selection,\n                  table: { ...selection.table\n                  },\n                  date: new Date(e.target.value)\n                };\n                setSelection(newSel);\n              } else {\n                console.log(\"Invalid date\");\n                let newSel = { ...selection,\n                  table: { ...selection.table\n                  },\n                  date: new Date()\n                };\n                setSelection(newSel);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookingItemEach\",\n          children: /*#__PURE__*/_jsxDEV(UncontrolledDropdown, {\n            children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n              color: \"none\",\n              caret: true,\n              className: \"bookingOption\",\n              children: selection.time === null ? \"Select a Time\" : selection.time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bookingOptionMenu\",\n              children: getTimes()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookingItemEach\",\n          children: /*#__PURE__*/_jsxDEV(UncontrolledDropdown, {\n            children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n              color: \"none\",\n              caret: true,\n              className: \"bookingOption\",\n              children: selection.size === null ? \"Select a Party Size\" : selection.size.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bookingOptionMenu\",\n              children: getSizes()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tablesDisplay\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [getEmptyTables() > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"availableNumbers\",\n            children: [getEmptyTables(), \" Available Tables\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 17\n          }, this) : null, selection.date && selection.time && selection.size ? getEmptyTables() > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tableKey\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"emptyTable\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 23\n              }, this), \" \\xA0 Available \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"fullTable\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 23\n              }, this), \" \\xA0 Unavailable \\xA0\\xA0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"getTables\",\n              children: getTables()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bookingTableMessage\",\n            children: \"No Available Tables\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bookingTableMessage\",\n            children: \"Please select a date and time for your reservation.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"confirm-reservation-stuff\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"text-center justify-content-center reservation-details-container\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: \"12\",\n          sm: \"3\",\n          className: \"reservation-details\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            bsSize: \"lg\",\n            placeholder: \"Name\",\n            className: \"reservation-input\",\n            value: booking.name,\n            onChange: e => {\n              setBooking({ ...booking,\n                name: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: \"12\",\n          sm: \"3\",\n          className: \"reservation-details\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            bsSize: \"lg\",\n            placeholder: \"Phone Number\",\n            className: \"reservation-input\",\n            value: booking.phone,\n            onChange: e => {\n              setBooking({ ...booking,\n                phone: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: \"12\",\n          sm: \"3\",\n          className: \"reservation-details\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            bsSize: \"lg\",\n            placeholder: \"Email\",\n            className: \"reservation-input\",\n            value: booking.email,\n            onChange: e => {\n              setBooking({ ...booking,\n                email: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"none\",\n            className: \"book-table-btn\",\n            onClick: _ => {\n              reserve();\n            },\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              className: \"link\",\n              to: \"/thankyou\",\n              children: \"Book Now\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Book, \"GwCA3H9XcIkEYnnnFGLh33BM6Z4=\");\n\n_c = Book;\n\nvar _c;\n\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"sources":["D:/Courses/UH COURSES/Fall 2021/COSC 4351/Booking-Reservation-App/client/src/pages/book/Book.jsx"],"names":["React","useState","useEffect","Row","Col","UncontrolledDropdown","DropdownToggle","DropdownItem","Input","Button","Table","Link","Book","totalTables","setTotalTables","selection","setSelection","table","name","id","date","Date","time","size","booking","setBooking","phone","email","times","reservationError","setReservationError","getDate","_","months","getMonth","getFullYear","slice","console","log","datetime","getEmptyTables","tables","filter","isAvailable","length","res","fetch","method","headers","body","JSON","stringify","json","capacity","reserve","text","selectTable","table_name","table_id","getSizes","newSizes","i","push","e","newSel","getTimes","newTimes","forEach","getTables","_id","toISOString","split","isNaN","target","value","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  Input,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport Table from \"../../components/table/Table\";\r\nimport \"./book.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Book() {\r\n  const [totalTables, setTotalTables] = useState([]);\r\n\r\n  // User's selections\r\n  const [selection, setSelection] = useState({\r\n    table: {\r\n      name: null,\r\n      id: null,\r\n    },\r\n    date: new Date(),\r\n    time: null,\r\n    size: null,\r\n  });\r\n\r\n  // User's booking details\r\n  const [booking, setBooking] = useState({\r\n    name: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  const [times] = useState([\r\n    \"4PM\",\r\n    \"5PM\",\r\n    \"6PM\",\r\n    \"7PM\",\r\n    \"8PM\",\r\n    \"9PM\",\r\n    \"10PM\",\r\n    \"11PM\",\r\n  ]);\r\n  // Basic reservation \"validation\"\r\n  const [reservationError, setReservationError] = useState(false);\r\n\r\n  const getDate = (_) => {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const date =\r\n      months[selection.date.getMonth()] +\r\n      \" \" +\r\n      selection.date.getDate() +\r\n      \" \" +\r\n      selection.date.getFullYear();\r\n    let time = selection.time.slice(0, -2);\r\n    console.log(time);\r\n    time = selection.time > 12 ? time + 10 + \":00\" : time + \":00\";\r\n    const datetime = new Date(date + \" \" + time);\r\n    return datetime;\r\n  };\r\n\r\n  const getEmptyTables = (_) => {\r\n    let tables = totalTables.filter((table) => table.isAvailable);\r\n    return tables.length;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check availability of tables (time & date && size)\r\n    if (selection.time && selection.date && selection.size) {\r\n      (async (_) => {\r\n        let datetime = getDate();\r\n        let res = await fetch(\"http://localhost:5000/api/availability\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            date: datetime,\r\n          }),\r\n        });\r\n        res = await res.json();\r\n        // Filter available tables with location and group size criteria\r\n        let tables = res.tables.filter((table) =>\r\n          selection.size > 0 ? table.capacity >= selection.size : true\r\n        );\r\n        setTotalTables(tables);\r\n      })();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selection.time, selection.date, selection.size]);\r\n\r\n  // Make the reservation if all details are filled out\r\n  const reserve = async (_) => {\r\n    if (\r\n      (booking.name.length === 0) |\r\n      (booking.phone.length === 0) |\r\n      (booking.email.length === 0)\r\n    ) {\r\n      console.log(\"Incomplete Details\");\r\n      setReservationError(true);\r\n    } else {\r\n      const datetime = getDate();\r\n      let res = await fetch(\"http://localhost:5000/api/reserve\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          ...booking,\r\n          date: datetime,\r\n          table: selection.table.id,\r\n        }),\r\n      });\r\n      res = await res.text();\r\n      console.log(\"Reserved: \" + res);\r\n      //   props.setPage(2);\r\n    }\r\n  };\r\n\r\n  // Clicking on a table sets the selection state\r\n  const selectTable = (table_name, table_id) => {\r\n    setSelection({\r\n      ...selection,\r\n      table: {\r\n        name: table_name,\r\n        id: table_id,\r\n      },\r\n    });\r\n  };\r\n\r\n  // Generate party size dropdown\r\n  const getSizes = (_) => {\r\n    let newSizes = [];\r\n\r\n    for (let i = 1; i <= 8; i++) {\r\n      newSizes.push(\r\n        <DropdownItem\r\n          key={i}\r\n          className=\"bookingOptionItem\"\r\n          onClick={(e) => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table,\r\n              },\r\n              size: i,\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {i}\r\n        </DropdownItem>\r\n      );\r\n    }\r\n    return newSizes;\r\n  };\r\n\r\n  // Generate locations dropdown\r\n  const getTimes = (_) => {\r\n    let newTimes = [];\r\n    times.forEach((time) => {\r\n      newTimes.push(\r\n        <DropdownItem\r\n          key={time}\r\n          className=\"bookingOptionItem\"\r\n          onClick={(_) => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table,\r\n              },\r\n              time: time,\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {time}\r\n        </DropdownItem>\r\n      );\r\n    });\r\n    return newTimes;\r\n  };\r\n\r\n  // Generating tables from available tables state\r\n  const getTables = (_) => {\r\n    console.log(\"Getting tables\");\r\n    if (getEmptyTables() > 0) {\r\n      let tables = [];\r\n      totalTables.forEach((table) => {\r\n        if (table.isAvailable) {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              empty\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        } else {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        }\r\n      });\r\n      return tables;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"booking\">\r\n      <div className=\"bookingTop\">\r\n        <span className=\"bookingTitle\">\r\n          {!selection.table.id ? \"Available Tables\" : \"Confirm Reservation\"}\r\n        </span>\r\n        <span className=\"bookingTableName\">\r\n          {selection.table.id\r\n            ? \"You are booking \" + selection.table.name\r\n            : null}\r\n        </span>\r\n\r\n        {reservationError ? (\r\n          <span className=\"reservation-error\">\r\n            * Please fill out all of the details.\r\n          </span>\r\n        ) : null}\r\n      </div>\r\n\r\n      {!selection.table.id ? (\r\n        <div id=\"reservation-stuff\" className=\"bookingPage\">\r\n          <div className=\"bookingItems\">\r\n            <div className=\"bookingItemEach\">\r\n              <input\r\n                type=\"date\"\r\n                required=\"required\"\r\n                className=\"bookingOption\"\r\n                value={selection.date.toISOString().split(\"T\")[0]}\r\n                onChange={(e) => {\r\n                  if (!isNaN(new Date(new Date(e.target.value)))) {\r\n                    let newSel = {\r\n                      ...selection,\r\n                      table: {\r\n                        ...selection.table,\r\n                      },\r\n                      date: new Date(e.target.value),\r\n                    };\r\n                    setSelection(newSel);\r\n                  } else {\r\n                    console.log(\"Invalid date\");\r\n                    let newSel = {\r\n                      ...selection,\r\n                      table: {\r\n                        ...selection.table,\r\n                      },\r\n                      date: new Date(),\r\n                    };\r\n                    setSelection(newSel);\r\n                  }\r\n                }}\r\n              ></input>\r\n            </div>\r\n            <div className=\"bookingItemEach\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle color=\"none\" caret className=\"bookingOption\">\r\n                  {selection.time === null ? \"Select a Time\" : selection.time}\r\n                </DropdownToggle>\r\n                <div className=\"bookingOptionMenu\">{getTimes()}</div>\r\n              </UncontrolledDropdown>\r\n            </div>\r\n            <div className=\"bookingItemEach\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle color=\"none\" caret className=\"bookingOption\">\r\n                  {selection.size === null\r\n                    ? \"Select a Party Size\"\r\n                    : selection.size.toString()}\r\n                </DropdownToggle>\r\n                <div className=\"bookingOptionMenu\">{getSizes()}</div>\r\n              </UncontrolledDropdown>\r\n            </div>\r\n          </div>\r\n          <div className=\"tablesDisplay\">\r\n            <div>\r\n              {getEmptyTables() > 0 ? (\r\n                <div className=\"availableNumbers\">\r\n                  {getEmptyTables()} Available Tables\r\n                </div>\r\n              ) : null}\r\n\r\n              {selection.date && selection.time && selection.size ? (\r\n                getEmptyTables() > 0 ? (\r\n                  <div>\r\n                    <div className=\"tableKey\">\r\n                      <span className=\"emptyTable\"></span> &nbsp; Available\r\n                      &nbsp;&nbsp;\r\n                      <span className=\"fullTable\"></span> &nbsp; Unavailable\r\n                      &nbsp;&nbsp;\r\n                    </div>\r\n                    <div className=\"getTables\">{getTables()}</div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"bookingTableMessage\">No Available Tables</div>\r\n                )\r\n              ) : (\r\n                <div className=\"bookingTableMessage\">\r\n                  Please select a date and time for your reservation.\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div id=\"confirm-reservation-stuff\">\r\n          <Row className=\"text-center justify-content-center reservation-details-container\">\r\n            <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\r\n              <Input\r\n                type=\"text\"\r\n                bsSize=\"lg\"\r\n                placeholder=\"Name\"\r\n                className=\"reservation-input\"\r\n                value={booking.name}\r\n                onChange={(e) => {\r\n                  setBooking({\r\n                    ...booking,\r\n                    name: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\r\n              <Input\r\n                type=\"text\"\r\n                bsSize=\"lg\"\r\n                placeholder=\"Phone Number\"\r\n                className=\"reservation-input\"\r\n                value={booking.phone}\r\n                onChange={(e) => {\r\n                  setBooking({\r\n                    ...booking,\r\n                    phone: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\r\n              <Input\r\n                type=\"text\"\r\n                bsSize=\"lg\"\r\n                placeholder=\"Email\"\r\n                className=\"reservation-input\"\r\n                value={booking.email}\r\n                onChange={(e) => {\r\n                  setBooking({\r\n                    ...booking,\r\n                    email: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"text-center\">\r\n            <Col>\r\n              <Button\r\n                color=\"none\"\r\n                className=\"book-table-btn\"\r\n                onClick={(_) => {\r\n                  reserve();\r\n                }}\r\n              >\r\n                <Link className=\"link\" to=\"/thankyou\">\r\n                  Book Now\r\n                </Link>\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}